var documenterSearchIndex = {"docs":
[{"location":"pages/05_apireference/","page":"API","title":"API","text":"Modules = [TransferFunctions]\nOrder   = [:function, :type]","category":"page"},{"location":"pages/05_apireference/#TransferFunctions.apsf","page":"API","title":"TransferFunctions.apsf","text":"Amplitude point spread function\n\n\n\n\n\n","category":"function"},{"location":"pages/05_apireference/#TransferFunctions.apsf-Tuple{TransferFunctions.TransferFunction, Vararg{Any}}","page":"API","title":"TransferFunctions.apsf","text":"apsf(tf::TransferFunction, wh::Tuple{Integer,Integer}, Œîxy::Tuple{Length,Length})::OffsetMatrix{<:Real}\napsf(tf::TransferFunction, wh::Tuple{Integer,Integer}, Œîxy::Length)::OffsetMatrix{<:Real}\n\n\n\n\n\n","category":"method"},{"location":"pages/05_apireference/#TransferFunctions.ipsf","page":"API","title":"TransferFunctions.ipsf","text":"Intensity point spread function\n\n\n\n\n\n","category":"function"},{"location":"pages/05_apireference/#TransferFunctions.ipsf-Tuple{TransferFunctions.TransferFunction, Vararg{Any}}","page":"API","title":"TransferFunctions.ipsf","text":"ipsf(tf::TransferFunction, wh::Tuple{Integer,Integer}, Œîxy::Tuple{Length,Length})::OffsetMatrix{<:Real}\nipsf(tf::TransferFunction, wh::Tuple{Integer,Integer}, Œîxy::Length)::OffsetMatrix{<:Real}\n\n\n\n\n\n","category":"method"},{"location":"pages/05_apireference/#TransferFunctions.mtf-Tuple","page":"API","title":"TransferFunctions.mtf","text":"modulation transfer function\n\n\n\n\n\n","category":"method"},{"location":"pages/05_apireference/#TransferFunctions.otf","page":"API","title":"TransferFunctions.otf","text":"optical transfer function\n\n\n\n\n\n","category":"function"},{"location":"pages/05_apireference/#TransferFunctions.psf","page":"API","title":"TransferFunctions.psf","text":"Intensity point spread function i.e. the intensity ratio and phase shift of the sample intensity density\n\n\n\n\n\n","category":"function"},{"location":"pages/05_apireference/#TransferFunctions.psf-Tuple{MeasuredPSF, Tuple{Integer, Integer}}","page":"API","title":"TransferFunctions.psf","text":"psf(tf::MeasuredPSF, wh::Tuple{Integer,Integer} [,Œîxy::Tuple{Length,Length}]; intp, extp)::OffsetMatrix\n\nReturns a centered PSF interpolated from the measurement.\n\nParameters\n\nintp = BSpline(Cubic(Flat(OnGrid()))): interpolation method (default: cubic interpolation with flat slopes on the edge knots)\nextp = zero(eltype(tf.data)): extrapolation method\nzero(eltype(tf.data)) constant extrapolation outside of the bounds (ideal for background subtracted PSF)\nFlat() constant slope beyond the bounds (gives the last knot value and is equivalent to 0 for a background subtracted PSF)\nŒ¥ = wh .√∑ 2: output center of the PSF (default: center of the output size array rounded down)\n\nExtended Help\n\nImplementation Details\n\nInterpolation is done using scaled BSplines.\n\n\n\n\n\n","category":"method"},{"location":"pages/05_apireference/#TransferFunctions.psf-Union{Tuple{TF}, Tuple{Type{TransferFunctions.RadiallySymmetric{TF}}, TF, Tuple{Integer, Integer}, Tuple{Union{Quantity{T, ùêã, U}, Level{L, S, Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Quantity{T, ùêã, U}, Level{L, S, Quantity{T, ùêã, U}} where {L, S}} where {T, U}}}} where TF<:TransferFunctions.ModelPSF","page":"API","title":"TransferFunctions.psf","text":"psf(tf::TransferFunction, wh::Tuple{Integer,Integer}, Œîxy::Tuple{Length,Length})::OffsetMatrix\npsf(tf::TransferFunction, wh::Tuple{Integer,Integer}, Œîxy::Length)::OffsetMatrix\n\nGenerate the psf with size wh with Œîxy being the distance between the samples in the x and y dimensions\n\njulia> tf = BornWolf(488u\"nm\", 1.7, 1.7)\nBornWolf{Float64}(488.0 nm, 1.7, 1.7)\n\ntf = BornWolf(488u\"nm\", 1.7, 1.7) # hide\npsf(tf, (11,11), 60u\"nm\")\npsf(tf, (5,5), (40u\"nm\", 50u\"nm\")) # different pixelsizes in x and y direction\n\n\n\n\n\n","category":"method"},{"location":"pages/05_apireference/#TransferFunctions.psf-Union{Tuple{TF}, Tuple{Type{TransferFunctions.RadiallySymmetric{TF}}, TF, Union{Quantity{T, ùêã, U}, Level{L, S, Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Quantity{T, ùêã, U}, Level{L, S, Quantity{T, ùêã, U}} where {L, S}} where {T, U}}} where TF<:TransferFunctions.ModelPSF","page":"API","title":"TransferFunctions.psf","text":"psf(tf::TransferFunction, x::Length, y::Length)\n\nSample the PSF of the transfer function model/data at the point (x,y)\n\njulia> tf = BornWolf(488u\"nm\", 1.4, 1.7)\nBornWolf{Float64}(488.0 nm, 1.4, 1.7)\n\ntf = BornWolf(488u\"nm\", 1.4, 1.7) # hide\npsf(tf, 0u\"nm\", 5u\"nm\")\npsf.(tf, 0u\"nm\", -400u\"nm\":100u\"nm\":400u\"nm\")\n\n\n\n\n\n","category":"method"},{"location":"pages/05_apireference/#TransferFunctions.ptf-Tuple","page":"API","title":"TransferFunctions.ptf","text":"phase transfer function\n\n\n\n\n\n","category":"method"},{"location":"pages/05_apireference/#TransferFunctions.pupil-Tuple{TransferFunctions.TransferFunction}","page":"API","title":"TransferFunctions.pupil","text":"pupil function\n\n\n\n\n\n","category":"method"},{"location":"pages/05_apireference/#TransferFunctions.BornWolf","page":"API","title":"TransferFunctions.BornWolf","text":"Born & Wolf model of the transfer function for a circular aperture.\n\nParameters\n\nŒª::Unitful.Length: (emission) wavelength \nn·µ¢::Number: index of refraction of the immersion medium\nNA::Number: numerical aperture\n\nExtended help\n\nThe Born & Wolf model is a scalar diffraction model derived for perfect systems. It assumes that the only aberration of the system is due to defocus. Modern microscope objectives are designed to provide optimal imaging conditions for sources located directly on the coverslip, in which case the Born & Wolf model is applicable (if the coverslip and immersion is used as designed). The model disregards spherical and higher order aberrations that are due to the source of illumination being shifted from the coverslip boundary.\n\n\n\n\n\n","category":"type"},{"location":"pages/05_apireference/#TransferFunctions.GibsonLanni","page":"API","title":"TransferFunctions.GibsonLanni","text":"Gibson & Lanni model of the transfer function for a circular aperture.\n\nParameters\n\nExtended help\n\nThe Gibson & Lanni model is assumes that, disregarding defocus, all observed aberrations are generated by factors external to the objective (i.e. originating in the sample, coverslip and immersion medium combination). These aberrations can be characterized by the optical path difference between a ray in a perfect system (see BornWolf) and a ray under experimental conditions.\n\n\n\n\n\n","category":"type"},{"location":"pages/05_apireference/#TransferFunctions.IdealOTFwithCurvature","page":"API","title":"TransferFunctions.IdealOTFwithCurvature","text":"IdealCircularPupilOTF(œÅ‚ÇÄ::Real)\n\nIdeal (aberration free) OTF of a diffraction limited imaging system with incoherent light with the cutoff-frequency œÅ‚ÇÄ\n\nThe OTF is derived from the diffraction caused by the exit pupil of the system and disregards the effect of the entrance pupil... thus assumes no reshaping of the wavefronts in the optical system. The exit pupil, being located in the optical system just before the light reaches the image plane, has a greater effect on the optical system OTF.\n\nSee also IdealCircularPupilPSF (TODO)\n\nExamples\n\n- TODO\n\nExtended help\n\nThe OTF can be written in as a function of the cutoff frequency œÅ‚ÇÄ [1] \n\n    ‚Ñã(œÅ) = \n    begincases\n    (2œÄ) left\n        arccos(œÅ2œÅ‚ÇÄ) - (œÅ2œÅ‚ÇÄ)sqrt1 - (œÅ2œÅ‚ÇÄ)¬≤\n    right  text for  œÅ  2œÅ‚ÇÄ \n        0  text otherwise\n    endcases\n\n\nThe cutoff frequency can be written in terms of the wavelength Œª, distance between entrance pupil and the image plane f‚ÇÇ and the circular pupil radius w as\n\n    rho_0 = w(Œª f‚ÇÇ)\n\n[1]: Frequency Analysis of Optical Imaging Systems. In Introduction to Fourier optics; Roberts & Co: Englewood, Colo, 2005; pp. 127‚Äì172 ISBN 978-0-9747077-2-3.\n\n\n\n\n\n","category":"type"},{"location":"pages/05_apireference/#TransferFunctions.MeasuredOTF","page":"API","title":"TransferFunctions.MeasuredOTF","text":"MeasuredOTF holds an array of measured data with information about the dimensions of the measurement. This allows you to make conversions to other representations of a transfer function such as a PSF and to use interpolations to sample the OTF at arbitrary locations not included in the initial measurement (in general to use the measurements  similarly to how one could use a model). This can be useful for using the same OTF measurement for an acquisition with  a different pixelsize or in super resolution applications.\n\n\n\n\n\n","category":"type"},{"location":"pages/05_apireference/#TransferFunctions.MeasuredPSF","page":"API","title":"TransferFunctions.MeasuredPSF","text":"MeasuredPSF holds an array of measured data with information about the dimensions of the measurement. This allows you to make conversions to other representations of a transfer function such as an OTF and to use interpolations to sample the PSF at arbitrary locations not included in the initial measurement (in general to use the measurements  similarly to how one could use a model). This can be useful for using the same PSF measurement for an acquisition with  a different pixelsize or in super resolution applications.\n\nA measurement can be done for example using an image of subresolution microspheres.\n\n\n\n\n\n","category":"type"},{"location":"pages/05_apireference/#TransferFunctions.MeasuredTransferFunction","page":"API","title":"TransferFunctions.MeasuredTransferFunction","text":"An abstract type for the measurement of the transfer function of an optical system. It can be either a PSF measurement  MeasuredPSF or a MeasuredOTF.\n\n\n\n\n\n","category":"type"},{"location":"pages/05_apireference/#TransferFunctions.ModelTransferFunction","page":"API","title":"TransferFunctions.ModelTransferFunction","text":"An abstract type for any transfer function that is based on a physical model of an optical system. Contrary to a  MeasuredTransferFunction, a ModelTransferFunction must be quantifiable at any point (in either spatial or  frequency domain). The model can be of an OTF (ClosedFormOTFModel <: ModelTransferFunction) or a PSF  (ClosedFormPSFModel <: ModelTransferFunction) or a PupilFunction.\n\n\n\n\n\n","category":"type"},{"location":"pages/05_apireference/#TransferFunctions.RadiallySymmetric","page":"API","title":"TransferFunctions.RadiallySymmetric","text":"If the pupil function of the system is symmetric, the OTF as well as the PSF are radially symmteric which can be used to optimize the calculations\n\n\n\n\n\n","category":"type"},{"location":"pages/03_model_tfs/","page":"Transfer Function Models","title":"Transfer Function Models","text":"CurrentModule = TransferFunctions","category":"page"},{"location":"pages/03_model_tfs/#Models","page":"Transfer Function Models","title":"Models","text":"","category":"section"},{"location":"pages/03_model_tfs/","page":"Transfer Function Models","title":"Transfer Function Models","text":"IdealOTFwithCurvature\nBornWolf\nGibsonLanni","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TransferFunctions","category":"page"},{"location":"#TransferFunctions.jl","page":"Home","title":"TransferFunctions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Transfer functions for optical systems","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you want to know more about the model of image formation in optical systems (cameras, microscopes, etc.) see theory section.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generate OTF, PSF, MTF or PTF from a model or measured data\nConvert between OTF and PSF for models and measurements\nModels of transfer functions (OTF and PSF)\nDefine a transfer function from its Zernicke coefficients <!‚Äì TODO:  ‚Äì>\nEstimate the Zernicke coefficients for a measured transfer function <!‚Äì TODO: ‚Äì>","category":"page"},{"location":"pages/01_theory/#Theory-Overview","page":"Theory","title":"Theory Overview","text":"","category":"section"},{"location":"pages/01_theory/","page":"Theory","title":"Theory","text":"note: Note\nAll of the models assume incoherent illumination sources (i.e. where the radiation from the source has inocoherent frequency light). This is an approximation for most optical setups, but one that is used almost universally (e.g. in fluorescence microscopy).","category":"page"},{"location":"pages/01_theory/","page":"Theory","title":"Theory","text":"<!‚Äì TODO: ‚Äì>","category":"page"}]
}
